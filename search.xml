<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>关于Dockerfile</title>
    <url>/zh-CN/2025/AboutDockerfile/</url>
    <content><![CDATA[<p>主要记录学习过程</p>
<p>学到新东西了就来更新</p>
<p>Dockerfile有很多东西，这只是其中的一部分</p>
<span id="more"></span>
<p>先来看一个Dockerfile</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.11</span>.<span class="number">11</span>-slim-bookworm as build</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> PYTHONDONTWRITEBYTECODE=<span class="number">1</span></span><br><span class="line"><span class="keyword">ENV</span> PYTHONUNBUFFERED=<span class="number">1</span></span><br><span class="line"><span class="keyword">ENV</span> SET_CONTAINER_TIMEZONE=true</span><br><span class="line"><span class="keyword">ENV</span> CONTAINER_TIMEZONE=Asia/Shanghai</span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> TARGETARCH</span><br><span class="line"><span class="keyword">ARG</span> VERSION</span><br><span class="line"><span class="keyword">ENV</span> VERSION=$&#123;VERSION&#125;</span><br><span class="line"><span class="keyword">ENV</span> PYTHON_IN_DOCKER=<span class="string">&#x27;PYTHON_IN_DOCKER&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> scripts/* /app/</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get --allow-releaseinfo-change update \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt-get install -y --no-install-recommends jq chromium chromium-driver tzdata \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">ln</span> -snf /usr/share/zoneinfo/<span class="variable">$TZ</span> /etc/localtime \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">echo</span> <span class="variable">$TZ</span> &gt; /etc/timezone \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; dpkg-reconfigure --frontend noninteractive tzdata \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">rm</span> -rf /var/lib/apt/lists/*  \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt-get clean</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./requirements.txt /tmp/requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> /data \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">cd</span> /tmp \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; python3 -m pip install --upgrade pip \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; PIP_ROOT_USER_ACTION=ignore pip install \</span></span><br><span class="line"><span class="language-bash">    --disable-pip-version-check \</span></span><br><span class="line"><span class="language-bash">    --no-cache-dir \</span></span><br><span class="line"><span class="language-bash">    -r requirements.txt \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">rm</span> -rf /tmp/* \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; pip cache purge \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">rm</span> -rf /var/lib/apt/lists/* \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">rm</span> -rf /var/log/*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> LANG=C.UTF-<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;python3&quot;</span>,<span class="string">&quot;main.py&quot;</span>]</span></span><br></pre></td></tr></table></figure>
<p>槽点很多，多到数不过来</p>
<p>直接看修改后</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.11</span>-slim</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> PYTHONDONTWRITEBYTECODE=<span class="number">1</span> \</span><br><span class="line">    TZ=Asia/Shanghai</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> scripts/* .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> --mount=<span class="built_in">type</span>=<span class="built_in">bind</span>,<span class="built_in">source</span>=requirements.txt,target=/tmp/requirements.txt \</span></span><br><span class="line"><span class="language-bash">    apt-get update &amp;&amp; apt-get install -y --no-install-recommends \</span></span><br><span class="line"><span class="language-bash">    chromium \</span></span><br><span class="line"><span class="language-bash">    chromium-driver \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; pip install --no-cache-dir -r /tmp/requirements.txt \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">rm</span> -rf /var/lib/apt/lists/*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;python3&quot;</span>,<span class="string">&quot;main.py&quot;</span>]</span></span><br></pre></td></tr></table></figure>
<p>Python3.7后不再需要 <code>PYTHONUNBUFFERED</code></p>
<blockquote>
<p><a href="https://docs.python.org/3/using/cmdline.html#cmdoption-u">https://docs.python.org/3/using/cmdline.html#cmdoption-u</a></p>
</blockquote>
<p>Debian官方镜像只需要清理 <code>apt update</code> 时下载的目录即可</p>
<p>镜像中已经配置了自动清理deb包缓存</p>
<blockquote>
<p>在这个目录下 &#x2F;etc&#x2F;apt&#x2F;apt.conf.d&#x2F;docker-clean</p>
</blockquote>
<p>对 <code>requirements.txt</code> 的调用换成了官方最佳实践的示例</p>
<blockquote>
<p><a href="https://docs.docker.com/build/building/best-practices/#add-or-copy">https://docs.docker.com/build/building/best-practices/#add-or-copy</a></p>
</blockquote>
<p>将 <code>CMD</code> 换成了 <code>ENTRYPOINT</code></p>
<blockquote>
<ul>
<li><a href="https://docs.docker.com/reference/dockerfile/#entrypoint">ENTRYPOINT</a></li>
<li><a href="https://docs.docker.com/reference/dockerfile/#shell-and-exec-form">Shell and exec form</a></li>
<li><a href="https://docs.docker.com/reference/compose-file/services/#init">init</a></li>
</ul>
</blockquote>
<p>似乎有很多人安装了 <code>jq</code> 这个包，说实话我看不懂为什么要装，明明根本没有使用到啊？</p>
<p>删除了一堆关于时区的配置，配置时区只需要使用 <code>TZ</code> 环境变量就行，这是linux本身的环境变量</p>
<p>我对时区了解的不是很多，反正跑起来了不是吗</p>
<p>之后再继续更新</p>
]]></content>
  </entry>
  <entry>
    <title>关于Hexo在Github Pages上的搭建</title>
    <url>/zh-CN/2025/AboutHexo/</url>
    <content><![CDATA[<p>记录一下我在Github Page上搭建Hexo的过程</p>
<p><a href="https://hexo.io/docs/index.html">Hexo</a> 的官方文档似乎年久失修了</p>
<p>英文和中文的情况都差不多</p>
<p>但至少是能看的</p>
<blockquote>
<p>截止2025.4.7</p>
</blockquote>
<p>这些是我自己试出来的配置，跟文档里写的不太一样</p>
<p>因为我的环境不方便直接安装，我是在Docker容器中安装的</p>
<span id="more"></span>
<h2 id="OpenSSH"><a href="#OpenSSH" class="headerlink" title="OpenSSH"></a>OpenSSH</h2><p>设置连接配置以及信任github公钥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> .ssh</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>~/website/blog/.ssh/config</code></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">  HostName github.com</span><br><span class="line">  IdentityFile ~/.ssh/key_blog</span><br><span class="line">  User git</span><br><span class="line">  IdentitiesOnly yes</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>~/website/blog/.ssh/known_hosts</code></p>
<p>公钥可以在这里获取 <a href="https://docs.github.com/zh/authentication/keeping-your-account-and-data-secure/githubs-ssh-key-fingerprints">GitHub 的 SSH 密钥指纹</a></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">github.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl</span><br></pre></td></tr></table></figure>
<blockquote>
<p>本地生成ssh密钥</p>
</blockquote>
<blockquote>
<p>写这篇文章时官方首选的ssh密钥格式是ed25519</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/website/blog</span><br><span class="line">ssh-keygen -t ed25519 -f ./key_blog</span><br><span class="line"><span class="built_in">mv</span> key_blog .ssh/</span><br></pre></td></tr></table></figure>
<h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><p>往 <a href="https://hub.docker.com/_/node">node</a> 镜像里安装Hexo</p>
<blockquote>
<p><code>~/website/blog/Dockerfile</code></p>
</blockquote>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">23</span>-alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /blog</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm install -g hexo-cli \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; hexo init \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; npm install hexo-theme-next \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; npm install hexo-server --save \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; npm install hexo-deployer-git --save \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; npm install hexo-generator-searchdb \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apk add --no-cache git openssh-client \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; git config --global user.name <span class="string">&quot;Jinenze&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; git config --global user.email <span class="string">&quot;admin@jinenze.xyz&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> .ssh /root/.ssh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;hexo&quot;</span>,<span class="string">&quot;server&quot;</span>]</span></span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><a href="https://theme-next.js.org/docs/getting-started/">hexo-theme-next</a></li>
<li><a href="https://hexo.io/docs/server">hexo-server</a></li>
<li><a href="https://hexo.io/docs/one-command-deployment">hexo-deployer-git</a></li>
<li><a href="https://theme-next.js.org/docs/third-party-services/search-services">hexo-generator-searchdb</a></li>
</ul>
<p>记得把名字和邮箱地址换了</p>
<p><code>COPY</code> 的目标路径记得写绝对路径，不然你会看到一个名叫 <code>~</code> 的文件夹</p>
<p>关于 <code>CMD</code> 和 <code>ENTRYPOINT</code></p>
<ul>
<li><a href="https://docs.docker.com/reference/dockerfile/#entrypoint">ENTRYPOINT</a></li>
<li><a href="https://docs.docker.com/reference/dockerfile/#shell-and-exec-form">Shell and exec form</a></li>
<li><a href="https://docs.docker.com/reference/compose-file/services/#init">init</a></li>
</ul>
<p>顺带一提，页面生成与生成后的上传可以放到Github Actions上完成</p>
<p>那样就不需要 <code>hexo-deployer-git</code> 和 <code>git</code> 了</p>
<p>详细看左边的Github Actions那栏</p>
</blockquote>
<blockquote>
<p><code>~/website/blog/compose.yaml</code></p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">blog:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">blog</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment"># - VIRTUAL_HOST=blog.jinenze.xyz</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="comment"># expose:</span></span><br><span class="line">    <span class="comment">#   - 4000</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="comment"># networks:</span></span><br><span class="line">    <span class="comment">#   - nginx</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">4000</span><span class="string">:4000</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/_config.yml:/blog/_config.yml</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/_config.next.yml:/blog/_config.next.yml</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/source:/blog/source</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注释掉的是 <a href="https://hub.docker.com/r/nginxproxy/nginx-proxy">nginx-proxy</a> 配置，一个自动写nginx配置的项目</p>
<p>默认端口是4000，可以通过在compose文件末尾加上 <code>command: [&quot;-p&quot;,&quot;端口&quot;]</code> 来更改</p>
<p>如果映射出来的都是空文件记得先注释掉 <code>volumes</code> 然后 <code>docker cp blog:/blog ./data</code> 一下</p>
</blockquote>
<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p>设置仓库地址</p>
<blockquote>
<p><code>~/website/blog/data/_config.yml</code></p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:YourName/YourRepository.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>一般在文件末尾</p>
<p><code>repo</code> 换成你仓库ssh地址</p>
</blockquote>
<blockquote>
<p><code>~/website/blog/deploy.sh</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> blog sh -c <span class="string">&quot;</span></span><br><span class="line"><span class="string">  hexo clean \</span></span><br><span class="line"><span class="string">  &amp;&amp; hexo g -d</span></span><br><span class="line"><span class="string">&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>hexo clean</code> 会删除 <code>public</code> 文件夹和 <code>db.json</code></p>
</blockquote>
<h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p>新建仓库，名称随意</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/website/blog</span><br><span class="line"><span class="built_in">cat</span> key_blog.pub</span><br></pre></td></tr></table></figure>
<p><code>Settings &gt; Deploy keys &gt; Add deploy key</code> 把 <code>key_blog.pub</code> 的内容添加到deploy key里</p>
<p><code>Settings &gt; Pages</code> 改成 <code>Deploy from a branch</code></p>
<h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/website/blog</span><br><span class="line">docker compose up</span><br></pre></td></tr></table></figure>
<p>就可以启动容器了</p>
<p>需要注意alpine镜像默认没有bash，进入容器调试要用sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it blog sh</span><br></pre></td></tr></table></figure>
<p>到这里就可以开始写配置文件和文章了</p>
<p>文章放到 <code>source/_posts</code> 文件夹里</p>
<p>配置文件就是 <code>volumes</code> 映射出来的那些</p>
<p>下面是提醒</p>
<p><code>source</code> 文件夹下的文件夹会出现在网站根目录</p>
<p>在<code>source</code> 文件夹里放一个 <code>CNAME</code> 文件</p>
<p>在里面写上你的域名，最后把域名DNS解析到你的github域名就可以用自定义域名访问你的博客了</p>
<blockquote>
<p>不知道你的github域名的话可以在放上文件后在 <code>Settings &gt; Pages</code> 里等他验证一下DNS</p>
<p>没验证到就会提醒你改DNS解析记录</p>
</blockquote>
<p>可以在 <code>source/images</code> 下面存图片，用 <code>/images/name</code> 调用</p>
<p>记得注意图片大小，Github Pages还是有限制流量的</p>
<p><code>_posts</code> 目录是存放文章的默认路径</p>
<p><code>_posts</code> 目录下的所有md文件开头必须拥有一个 <a href="https://hexo.io/docs/front-matter">Front Matter</a> ，不然不会显示在网站里</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Next有对Front Matter进行扩展，点 <a href="https://theme-next.js.org/docs/advanced-settings/front-matter">这里</a></p>
</blockquote>
<p>下面的是个标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure>
<p>如果用户在首页，在这个标签下面的东西会被隐藏并显示一个阅读全文的按钮</p>
<p>得记得这玩意上面一行不要写字，不然那行字和底下的按钮会变大</p>
<p><code>_posts</code> 目录下的md文件更改时会直接同步到测试服务器上</p>
<p><code>_config</code> 开头的文件不会，更改的时候直接 <code>docker compose restart blog</code></p>
<p><code>_config</code> 开头的文件看文档编写</p>
<ul>
<li><a href="https://hexo.io/docs/configuration">Hexo</a> <code>_config.yml</code></li>
<li><a href="https://theme-next.js.org/docs/theme-settings/">Next</a> <code>_config.next.yml</code></li>
<li>Next <a href="https://theme-next.js.org/docs/third-party-services/search-services">Local Search</a></li>
</ul>
<blockquote>
<p>官方文档里对 <code>language</code> 项的描述。。。只能说写了，看 <a href="https://theme-next.js.org/docs/theme-settings/internationalization">Next的文档</a></p>
</blockquote>
<p>最好不要把 <code>_config.yml</code> 里的 <code>permalink</code> 项改成 <code>:title/</code></p>
<p>这样会把所有 <code>_posts</code> 里的文章全部丢进根目录</p>
<p>我写的是 <code>:lang/:year/:title/</code></p>
<p>需要在每篇文章的 <code>Front Matter</code> 里指定 <code>lang</code> ，或者看官方文档 <a href="https://hexo.io/docs/internationalization#Path">i18n Path</a> 配置默认设置</p>
<p>不然文章会出现在一个叫未定义的路径里</p>
<blockquote>
<p>之后可能会详细写一下怎么配置</p>
</blockquote>
<blockquote>
<p>评论和统计数据需要第三方服务，之后再说</p>
</blockquote>
<p>记得看别人是怎么配置的，也可以看看官方文档的配置</p>
<p>这个方案不会把网站的源配置挂在Github上，而且不会有历史提交记录</p>
<p>如果你不喜欢可以看下面的配置</p>
<h2 id="Github-Actions"><a href="#Github-Actions" class="headerlink" title="Github Actions"></a>Github Actions</h2><blockquote>
<p><code>~/website/blog/data/.github/workflows/deploy.yml</code></p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">Hexo</span> <span class="string">Blog</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-22.04</span></span><br><span class="line">    <span class="attr">permissions:</span></span><br><span class="line">      <span class="attr">contents:</span> <span class="string">write</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Node.js</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&#x27;23&#x27;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Hexo</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm install -g hexo-cli</span></span><br><span class="line"><span class="string">          hexo init</span></span><br><span class="line"><span class="string">          npm install hexo-theme-next</span></span><br><span class="line"><span class="string">          npm install hexo-generator-searchdb</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Download</span> <span class="string">Source</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          git clone --branch main --single-branch --depth 1 https://github.com/Jinenze/blog.git tmp-repo</span></span><br><span class="line"><span class="string">          cp -r tmp-repo/* .</span></span><br><span class="line"><span class="string">          rm -r tmp-repo</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">GitHub</span> <span class="string">Pages</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br></pre></td></tr></table></figure>
<p>这样配置时，当你推送代码到 <code>main</code> 分支的时候，会触发这个action</p>
<p>这样配置时就不需要在容器里安装 <code>git</code> 了，直接在宿主机把 <code>data</code> 文件夹上传到你仓库的 <code>main</code> 分支就行</p>
<p>部署时默认部署在 <code>gh-pages</code> 分支，记得把Github Page部署的 <code>branch</code> 换了</p>
]]></content>
  </entry>
  <entry>
    <title>关于使用ZeroTier进行异地组网</title>
    <url>/zh-CN/2025/AboutZeroTier/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>以下内容仅适用于ZeroTier1.14</p>
</blockquote>
<blockquote>
<p>我没有阅读过源码，请注意辨别</p>
</blockquote>
<p>ZeroTier可以说只有一个功能，就是将设备添加到另一个由ZeroTier控制的虚拟局域网</p>
<p>虽然简单，但十分强大</p>
<p>在国内环境下这也是合法访问个人信息平台的较为简单的方式</p>
<p>比如在你的家庭服务器上部署的个人网盘，密码托管，即时通讯，游戏服务器这样的服务</p>
<p>当你想让在其他城市的酒店里的设备，服务器机房里的设备，远在天边的其他人的设备访问到这些服务</p>
<p>这时候就可以使用 <a href="https://www.zerotier.com/">ZeroTier</a> 来构建一个虚拟局域网</p>
<span id="more"></span>
<blockquote>
<p>当然，也可以反过来访问这些设备，这是个局域网</p>
<p>局域网的用处不止这些，比如你可以让虚拟局域网内的设备把所有网络请求发到虚拟局域网内的在你家里的路由器</p>
<p>这样就可以在外面拥有在家里一样的网络环境了，所有经过公网的数据都由ZeroTier加密</p>
<p>不是路由器也行，但配置很麻烦，这里不展开讲</p>
</blockquote>
<blockquote>
<p>关于为什么违法可以搜索ICP备案这个东西</p>
</blockquote>
<h1 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h1><p>这个视频给了我很大帮助，我尽量不重复讲里面已经有的内容</p>
<p><a href="https://www.bilibili.com/video/BV1oL411Y7pB">这么良心的开源、内网穿透工具ZeroTier，为啥到你手就不好用了？</a></p>
<h2 id="ipv4与ipv6"><a href="#ipv4与ipv6" class="headerlink" title="ipv4与ipv6"></a>ipv4与ipv6</h2><p>当客户端连接到ZeroTier网络时，客户端会将自己的ip上传到服务器上</p>
<p>在其他客户端尝试连接的时候，会先尝试是否能使用ip直连</p>
<p>如果不能直连，会进入中继模式</p>
<p>不能直连的原因基本都是因为 <a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2">NAT</a> 造成的</p>
<blockquote>
<p>我没有研究过，在我开始了解的时候ipv6已经基本普及</p>
</blockquote>
<p>在ipv6环境下大概率没有NAT影响，所有设备都可以直接互访</p>
<p>如果你没有公网ipv6和公网ipv4，并且 <strong>非常确定</strong> 自己已经做了所有自己能做的事</p>
<p>那么还有两种办法：</p>
<ul>
<li>使用移动数据服务</li>
<li>购买云服务器</li>
</ul>
<p>使用运营商的移动数据服务，比如手机连接移动数据后启动个人热点让服务器连接</p>
<p>现在几乎所有运营商的移动数据都能让设备获得ipv6地址</p>
<p>如果这条路走不通，还可以去购买拥有公网ip的云服务器</p>
<p>把所有东西都丢到云服务器上直接运行，或者部署 <a href="https://github.com/fatedier/frp">frp</a> 服务器</p>
<p>先部署ZeroTier来避免打开公网端口，然后连接frp</p>
<p>再新建一个ZeroTier网络用来让其他设备连接后就可以使用你的服务了</p>
<p>只要有一方拥有公网ip，直连成功率接近百分百</p>
<p>选择购买服务器时，最好的办法其实是全自部署，详见下方</p>
<p>以上方式全部不推荐，我也没有真正尝试过，请确认你没有ipv6公网地址</p>
<h2 id="半自部署"><a href="#半自部署" class="headerlink" title="半自部署"></a>半自部署</h2><p>半自部署简单来说就是部署 <a href="https://docs.zerotier.com/controller">网络控制器</a></p>
<blockquote>
<p>planet和moon最前面的视频有讲，我不重复</p>
</blockquote>
<blockquote>
<p>以下是我的理解，请注意辨别</p>
</blockquote>
<p>半自部署最大的好处是没有官方网络控制器的设备数和网络数上限，并不会有安全性的提升</p>
<p>因为连接的planet服务器依旧是别人的，在连接网络时使用的是节点id+网络id的格式</p>
<p>而节点id是由planet服务器分发的，理论上planet可以把你导向另外的控制器</p>
<p>网络控制器控制着几乎所有的ZeroTier功能，比如IP分配，路由表和DNS配置下发</p>
<p>ZeroTier的客户端本身就拥有成为网络控制器的能力</p>
<p>你可以把他部署在一个始终在线的节点上，比如你家路由器</p>
<p>在连接到官方的管理界面 <a href="https://my.zerotier.com/">https://my.zerotier.com</a> 时，实际上就是连接到了官方分配给你的节点上的界面</p>
<p>我在这个方案上花了很多时间，最后发现其实挺简单</p>
<p>只要部署 <a href="https://github.com/key-networks/ztncui">ztncui</a> 就行</p>
<p>详细看下方实操</p>
<h2 id="全自部署"><a href="#全自部署" class="headerlink" title="全自部署"></a>全自部署</h2><p>全自部署和半自部署的区别就是直接部署了自己的planet服务器</p>
<p>这样所有的数据和权限都在自己手里</p>
<p>这是社区制作的一键部署包 <a href="https://github.com/xubiaolin/docker-zerotier-planet">docker-zerotier-planet</a></p>
<p>他会同时部署planet服务器，moon服务器，网络控制器管理界面 <a href="https://github.com/key-networks/ztncui">ztncui</a></p>
<p>但这个方案服务器ip变动时就需要进行重新搭建，并且需要暴露端口</p>
<p>既然都暴露端口了，在我的情况下不如直接配置 <a href="https://github.com/jeessy2/ddns-go">ddns-go</a> ，解析到公网ipv6</p>
<p>或许你可以通过调整云服务商提供的防火墙来避开法律风险？</p>
<p>比如每隔一段时间检查本机IP地址，然后仅允许本机IP地址通过？</p>
<p>这个方案没什么好讲的，下载下来一键启动就行</p>
<h1 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h1><p>也是同一个人的视频，我只做补充，以下内容全部使用官方网络控制器</p>
<p><a href="https://www.bilibili.com/video/BV1Vh411F7Mr">内网穿透工具ZeroTier，从简单到复杂的玩法，无保留，一期全放送</a></p>
<h2 id="ztncui"><a href="#ztncui" class="headerlink" title="ztncui"></a>ztncui</h2><blockquote>
<p>注意，ztncui的Github仓库上次更新时间是2年前</p>
</blockquote>
<p>我这里提供Docker的部署方法，因为我的环境不方便使用npm</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">23</span>-alpine AS builder</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk add --no-cache git python3 build-base &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    git <span class="built_in">clone</span> --branch master --single-branch --depth 1 https://github.com/key-networks/ztncui.git</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /ztncui/src</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm -g install node-gyp &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    npm install</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">23</span>-alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=builder /ztncui /ztncui</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /ztncui/src</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;npm&quot;</span>,<span class="string">&quot;start&quot;</span>]</span></span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">ztncui:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">ztncui</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">HTTP_ALL_INTERFACES=yes</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./passwd:/ztncui/src/etc/passwd</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/lib/zerotier-one/authtoken.secret:/var/lib/zerotier-one/authtoken.secret</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>这两个文件一个是web面板的用户密码，一个是ZeroTier的访问密钥</p>
<p>默认端口 <code>3000</code>，能改</p>
<p><code>HTTP_ALL_INTERFACES</code> 意思是任何ip地址都能访问，方便nginx反向代理</p>
<p>详细设置请看官方仓库 <a href="https://github.com/key-networks/ztncui">ztncui</a></p>
</blockquote>
<p>所有功能都是官方客户端实现的，所以配置文件只有密码</p>
<p>启动后打开网页点左上角的 <code>Add network</code> 就可以添加网络</p>
<p>少量设备其实没必要使用这个功能，而且在我的情况下必须先连接到网络才能打开管理面板</p>
<h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><p>ZeroTier虽然不需要去在意节点本身的ip地址，但连接其他节点时使用的还是内网ip地址</p>
<p>如果不想记忆ip地址，想使用域名访问服务器的话，在web面板里有一个DNS配置</p>
<p><img src="/images/ZTDNS.png" alt="DNS"></p>
<p>Search Domain里填写你想要解析的域名，再在Server Address里填写DNS服务器的ip就可以</p>
<p>根据我的经验，比如你想访问 <code>123.zt</code> 或 <code>www.123.zt</code> ，那么你就可以填写 <code>zt</code> 或 <code>123.zt</code></p>
<p>填写 <code>zt</code> 时效果类似 <code>*.*.zt</code>，我没有详细测试</p>
<p>因为我有一台openwrt软路由，所以没有部署过DNS服务器，你可以自己找一找</p>
<blockquote>
<p>似乎只能同时解析一个顶级域名，但我在测试时是可以解析两个顶级域名的</p>
<p>我的网络环境比较复杂，有时间的可以自己试试</p>
</blockquote>
<blockquote>
<p>其实还有很多方案，比如</p>
<ul>
<li>买个域名然后解析到ZeroTier内网地址</li>
<li>hosts文件</li>
<li>本地DNS</li>
</ul>
</blockquote>
<h2 id="局域网联机"><a href="#局域网联机" class="headerlink" title="局域网联机"></a>局域网联机</h2><p>在使用ZeroTier进行局域网联机时有时不能发现其他设备，可以尝试调整 <a href="https://www.techkoala.net/windows_10_network_priority/">Windows 网络连接优先级设置</a></p>
<h2 id="默认路由"><a href="#默认路由" class="headerlink" title="默认路由"></a>默认路由</h2><p>如果想让网络内的设备像在家里的局域网里一样通过网络内的路由器上网</p>
<p>官方有一篇教程 <a href="https://docs.zerotier.com/exitnode">VPN Exit Node</a></p>
<p>简单来说就是把路由规则设置成以下这样</p>
<p><img src="/images/ZTRoutes.png" alt="Routes"></p>
<p>然后将终端设备的allowDefault设置为1</p>
<p>Windows的长这样</p>
<p><img src="/images/ZTWindowsConfig.png" alt="Windows"></p>
<p>官方安卓客户端上长这样</p>
<p><img src="/images/ZTAndroidConfig.png" alt="Android"></p>
<p>引用一下DeepSeek生成的</p>
<blockquote>
<p>ZeroTier中的<code>allowDefault</code>设置名称源于其功能目的，具体解析如下：</p>
<ol>
<li><strong>命名来源解析</strong>：</li>
</ol>
<ul>
<li><strong>“Default”（默认）</strong>：指代计算机网络中的<strong>默认路由（Default Route）</strong>。默认路由是当目标地址不在其他路由规则中时，数据包选择的路径，通常用于连接互联网（如<code>0.0.0.0/0</code>）。</li>
<li><strong>“Allow”（允许）</strong>：表示该设置是一个权限开关，控制是否<strong>允许ZeroTier修改系统的默认路由</strong>&gt; 。</li>
</ul>
<ol start="2">
<li><strong>功能作用</strong>：</li>
</ol>
<ul>
<li>当<code>allowDefault</code>设置为<code>true</code>时，ZeroTier会将自身的虚拟网络接口（如<code>zt0</code>）添加为系统的默认路由。这意味着<strong>所有未匹配到其他路由规则的流量</strong>（包括互联网访问）都会被导向ZeroTier网络。</li>
<li>若设置为<code>false</code>，则ZeroTier不会干预系统的默认路由，设备通过原有网络接口（如Wi-Fi、以太网）访问互联网。</li>
</ul>
<ol start="3">
<li><strong>典型应用场景</strong>：</li>
</ol>
<ul>
<li><strong>VPN类似功能</strong>：启用<code>allowDefault</code>后，所有流量经过ZeroTier网络，适合需要统一流量出口或加密的场景（如通过企业服务器访问外网）。</li>
<li><strong>隔离网络通信</strong>：禁用此设置时，ZeroTier仅处理与虚拟网络相关的流量（如<code>10.147.17.0/24</code>），其他流量保持本地直连，避免影响正常上网。</li>
</ul>
<ol start="4">
<li><strong>注意事项</strong>：</li>
</ol>
<ul>
<li><strong>潜在风险</strong>：若ZeroTier网络未配置正确出口节点（如缺少公共IP转发），启用<code>allowDefault</code>可能导致设备断网。</li>
<li><strong>配置建议</strong>：通常仅在需要全局流量管控时启用，普通组网场景建议保持关闭，仅通过特定路由规则（如<code>route 0.0.0.0/0 via 网关IP</code>）定向部分流量。</li>
</ul>
<p><strong>示例配置</strong>：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment">// 在ZeroTier网络配置的routes部分：</span></span><br><span class="line">&gt;<span class="punctuation">&#123;</span></span><br><span class="line"> <span class="attr">&quot;routes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">   <span class="punctuation">&#123;</span> <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10.147.17.0/24&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;via&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span> <span class="punctuation">&#125;</span><span class="punctuation">,</span>  <span class="comment">// ZeroTier局域网直连</span></span><br><span class="line">   <span class="punctuation">&#123;</span> <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.0.0/0&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;via&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10.147.17.1&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;allowDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="punctuation">&#125;</span>  <span class="comment">// 默认路由经网关</span></span><br><span class="line"> <span class="punctuation">]</span></span><br><span class="line">&gt;<span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>此配置中，<code>allowDefault: true</code>允许将<code>10.147.17.1</code>设为默认网关，所有非本地流量通过该节点转发。</p>
<p>总之，<code>allowDefault</code>的命名直观反映了其核心功能：<strong>允许（Allow）ZeroTier接管系统的默认（Default）路由</strong>，这一设计既符合技术术语，也遵循了软件配置的常见命名规范。</p>
</blockquote>
<h2 id="Docker部署"><a href="#Docker部署" class="headerlink" title="Docker部署"></a>Docker部署</h2><p>我认为一般用户没必要看这个，这个栏目本身其实是我在摸索的时候走歪的一条路</p>
<p>一般来说直接安装官方包就行</p>
<p>如果实在不行，可以继续看</p>
<p>在Docker下安装有三条路</p>
<ul>
<li>部署 <a href="https://hub.docker.com/r/zerotier/zerotier">官方镜像</a></li>
<li>在Debian镜像下安装官方包</li>
<li>在Alpine镜像下自行编译源码<blockquote>
<p>Alpine本来似乎是有官方包的，后来被撤了</p>
</blockquote>
</li>
</ul>
<p>第一条路我死活跑不起来，第二条路镜像体积太大</p>
<p>下面是我摸索很久走出来的第三条路</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:latest AS builder</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk add --no-cache curl git make linux-headers openssl-dev pkgconf gcc g++ &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    curl --proto <span class="string">&#x27;=https&#x27;</span> --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">source</span> <span class="string">&quot;<span class="variable">$HOME</span>/.cargo/env&quot;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    git <span class="built_in">clone</span> --branch main --single-branch --depth 1 https://github.com/zerotier/ZeroTierOne.git &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">cd</span> ZeroTierOne &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    make -j</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> alpine:latest</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk add --no-cache libstdc++ gcompat openssl libgcc</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=builder /ZeroTierOne/zerotier-one /usr/sbin/zerotier-one</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=builder /ZeroTierOne/zerotier-cli /usr/sbin/zerotier-cli</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;zerotier-one&quot;</span>]</span></span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">zerotier:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">zerotier</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/var/lib/zerotier-one</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/dev/net/tun:/dev/net/tun</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>构建镜像时的CPU需求量很高，记得放在主力机上构建</p>
<p>这是我试出来的最小配置，不嫌烦的可以自己试试</p>
<p>以及我给了这个容器privileged权限，不喜欢的可以自己试试</p>
<p>顺带一提，我现在用的是OpenWrt软件库里的包</p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>这套方案适合不敢直接开端口到公网的人，也适合朋友之间联机用</p>
<p>我是在很久之前就发现了ZeroTier这样的软件，但直到最近才真正搞懂他是怎么运行的</p>
<p>ZeroTier有一个竞品 <a href="https://tailscale.com/">TailScale</a>，可以看看这个视频 <a href="https://www.bilibili.com/video/BV13P411q7Cy">能与ZeroTier齐名的内网穿透工具Tailscale，比ZeroTier还好用？</a></p>
<p>目前看来对于普通用户来说这玩意比ZeroTier更好，更新更勤，协议更透明，全平台支持更好</p>
<p>也不是没有缺点，不能自定义IP，强制注册账号，限制死的用户数和设备数</p>
<blockquote>
<p>但是免费套餐对于个人用户来说足够了</p>
</blockquote>
<p>之后可能会拎出来单独讲讲</p>
<p>有的人可能不喜欢中心化的模式，有一个开源的去中心化的类似项目 <a href="https://easytier.cn/">EasyTier</a></p>
<p>这两个项目都使用到了 <a href="https://www.wireguard.com/">WireGuard</a> 作为协议，如果直接使用WireGuard的话需要开放防火墙端口到公网</p>
<p>ZeroTier使用的是自己的协议，但这并不代表ZeroTier好过其他产品，这方面我没有能力评价</p>
<p>目前这套解决方案对于我来说已经足够了，所以我没有仔细研究过其他的解决方案</p>
<p>虽然东西看上去不多，但是折磨了我很久，我没能找到一篇能从头到尾给我讲明白的文章</p>
<p>这篇文章也引用了很多别人的东西，我不觉得我能讲得比别人好</p>
<p>我很感谢他们，希望我也能帮助到你</p>
<p>总之我写了这篇文章，如果有帮到你或者你有什么需要补充的，可以点 <a href="https://blog.jinenze.xyz/about/about.html">这里</a></p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/undefined/2025/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
